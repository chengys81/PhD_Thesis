{
mySimul <- function(n,mu1,mu2,eta,alpha1,alpha2,sigma) {
#Computation begins
m=length(n)             #Number of blocks
nt=sum(n);              #Number of Patients (total)
# generate random sequence
ranSeq <- unlist(lapply(n, function(x) sample.int(x, x)))
# compute Xi, -1 for C, 1 for T
xi <- ranSeq %% 2 - (ranSeq + 1) %% 2
# compute Si
preS <- cumsum(xi) - xi    # each element is the sum of x1 to x(i-1)
s <- round(preS/(abs(preS)+0.001))
# generate z, assume z is Age, which is normal distributed
z1 <- round(rnorm(nt, 55, 15))
z2 <- rbinom(nt, 1,0.5)
# compute Y
designmatrix <- cbind(( 1 - xi) / 2, (xi + 1) / 2, s, z1, z2)
b<-c(mu1,mu2,eta,alpha1,alpha2)
expectedY<-designmatrix %*% b
Y <- sapply(expectedY, function(x) rnorm(1, x, sigma))
# calculating determinant.
detVal <- det(t(designmatrix) %*% designmatrix)
# estimating beta with general inverse
# solve will not working when det = 0
beta <- ginv(t(designmatrix) %*% designmatrix) %*% t(designmatrix) %*% Y
# estimating sigma
mlSigma <- sqrt(sum((Y-designmatrix %*% beta)^2) /  nt)
if (isTRUE(all.equal(detVal, 0)))
list <- list(c(beta, mlSigma, detVal),
list(designmatrix,c(beta, mlSigma, detVal)))
else list <- list(c(beta, mlSigma, detVal), NULL)
return (list)
}
# simulation W times and return results as data.frame
sim <- replicate(W, mySimul(n,mu1,mu2,eta,alpha1,alpha2,sigma))
#subsetting sim, which is list with 2W elements
sub <- rep(c(TRUE, FALSE),W)
simResult <- sapply(sim[sub],c)
design <- sim[!sub]
# if design is null list, empty it as NULL
design[sapply(design, is.null)] <- NULL
# checking determinant is zero or not, and use these info to subset
# simulation result and counting zero determinant
detZero <- sapply(simResult[7,], function(x) isTRUE(all.equal(x, 0)))
# subsetting simulation result based on logical vector detSign
# indicating whether determinant is non-zero
result <- subset(t(simResult), !detZero)[,1:6]
# calculate mean and sd for all
mlMeans <- apply(result, 2, mean)
mlSDs <- apply(result, 2, sd)
mlResults <- data.frame(mlMeans, mlSDs, sum(detZero))
mlList <- list(mlResults, design)
mlList
}
# compute the simulations for all blocks and parameter scenarios using
# mapply parallel version from package parallel
#list <- mcmapply(allscenarios,block, mu1, mu2, eta, alpha1,alpha2, sigma, mc.cores=detectCores())
# result <- do.call(rbind, list[rep(c(TRUE, FALSE),length(block))])
# designmatrix <- list[rep(c(FALSE, TRUE),length(block))]
# when using windows, replace mcmapply with clusterMap
mc <- detectCores()
cl <- makeCluster(getOption("cl.cores", mc))
clusterEvalQ(cl,library(MASS))
list <- clusterMap(cl,allscenarios,w, block, mu1, mu2, eta, alpha1, alpha2, sigma)
stopCluster(cl)
# subset list[[i]][[j]] by sapply(list, "[[", j)
result <- do.call(rbind, lapply(list, "[[", 1))
designmatrix <- lapply(list, "[[", 2)
allresults <- as.matrix(round(cbind(result[1:36,], result[37:72,], result[73:108,],result[109:144,]), 4))
colnames(allresults) <- c("(6,2,4,6,6)-mean","(6,2,4,6,6)-std","numberDetZero", '(20,10,20,30,20)-mean', '(20,10,20,30,20)-std',"numberDetZero", "(40,40,40,60,60,60)-mean","(40,40,40,60,60,60)-std","numberDetZero", "(1000)-mean","(1000)-std", "numberDetZero")
rownames(allresults) <- c('mu1=50','mu2=50','eta=20','alpha1=3','alpha2=20','sigma=50', 'mu1=50','mu2=50','eta=20','alpha1=3','alpha2=10','sigma=50', 'mu1=50','mu2=50','eta=20','alpha1=1','alpha2=20','sigma=100', 'mu1=70','mu2=50','eta=10','alpha1=3','alpha2=20','sigma=200', 'mu1=70','mu2=50','eta=10','alpha1=3','alpha2=20','sigma=100', 'mu1=70','mu2=50','eta=0','alpha1=3','alpha2=30','sigma=50')
allresults
write.csv2(allresults, file='/Users/wuxueping/WXP/Medical Biometry Masterstudiengang/Masterarbeit/one more covariate/onemorecovariatesimulationresults/AgeSex10k.csv', row.names=TRUE)
str(designmatrix)
save(list=ls(), file="/Users/wuxueping/WXP/Medical Biometry Masterstudiengang/Masterarbeit/one more covariate/onemorecovariatesimulationresults/AgeSex10k.RData")
proc.time() - pml
Rprof(NULL)
summaryRprof()
# compute rref of designmatrix with package pracma
#install.packages("pracma")
z1 <- designmatrix[[c(1,2,1)]]
z1
library(pracma)
rref(z1)
# ploting the data
library(ggplot2) # pretty plot
# genereate mu value matrix to calculate difference between mean and
# mu
mu <- c(c(50,50,20,3,20,50), c(50,50,20,3,10,50), c(50,50,20,1,20,100), c(70,50,10,3,20,200), c(70,50,10,3,20,100), c(70,50,0,3,30,50))
diff <- result[,1] - mu
# possible log transform for diff
# diff <- log2(abs(diff) + 1)
# generate dataframe for plotting
estlabel <- c("mu1","mu2","eta","alpha1","alpha2", "sigma")
est <- rep(estlabel, 24)
mulabel <- matrix(mu, ncol=6)
mulabel <- apply(mulabel, 2, function(x) paste(x[1],x[2],x[3],x[4],x[5],x[6], sep="_"))
mulabel <- rep(rep(mulabel, each=6),4)
block <- rep(c("6_2_4_6_6","20_10_20_30_20", "40_40_40_60_60_60","1000"), each=36)
df <- data.frame(est=est, mu=mulabel, block=block, diff=diff, sd=result[,2])
# change labels for block and mu
df$block <- factor(df$block, levels=c("6_2_4_6_6","20_10_20_30_20", "40_40_40_60_60_60","1000"), labels=c("(6,2,4,6,6)","(20,10,20,30,20)", "(40,40,40,60,60,60)","(1000)"))
df$mu <- factor(df$mu, levels=c("50_50_20_3_20_50","50_50_20_3_10_50","50_50_20_1_20_100","70_50_10_3_20_200","70_50_10_3_20_100","70_50_0_3_30_50" ),labels=c("50,50,20,3,20,50", "50,50,20,3,10,50","50,50,20,1,20,100", "70,50,10,3,20,200", "70,50,10,3,20,100","70,50,0,3,30,50"))
df$est <- factor(df$est, levels=estlabel)
# plot with ggplot2
# better with legend color and overall effects
# define label for legend label with greek letters and subscripts
legendLabel <- c(expression(mu[1]), expression(mu[2]), expression(eta), expression(alpha[1]), expression(alpha[2]), expression(sigma))
# ggplot2 object with scatter plot group by block and mu combinations
p <- qplot(sd, diff, data=df, facets=mu ~ block, col=est)
# adding x, y, and title labels
p <- p + labs(title="Simulation with Age and Sex Covariate", x="Standard Error",y="Deviation from True Parameters")
# add legend label text with greek letters
p <- p + scale_colour_discrete(name="Estimators", labels=legendLabel)
# change text size in annotating block and mu's
p <- p + theme(strip.text.y = element_text(size=8), strip.text.x = element_text(size=8))
AgeSex_final_plot <- p
AgeSex_final_plot
# scale with asinh, something like log
library(scales)
asinh_trans <- function(){
trans_new(name = 'asinh', transform = function(x) asinh(x),
inverse = function(x) sinh(x))
}
p <- p + scale_y_continuous(trans = 'asinh', breaks=c(-25,-5,-1,0,1,5,25))
p <- p + scale_x_continuous(trans="asinh", breaks=c(0,1,5,25,125))
p
Rprof()
pml <- proc.time()
# library for parallel computing with multiple cores
library(parallel)
library(MASS) # call function ginv
#  Full rank model
#  let covariate z1 be Age-- normal distribution Z1 ~ N(55,15)
#  let covariate z2 be binary variable Sex-- Bernoulli distributed with p=0.5
#  tried 4 different block constellations: (6,2,4,6,6),(20,10,20,30,20),(40,40,40,60,60,60),(1000)
#  tried 6 differnt parameter structures: (mu1,mu2,eta,alpha1,alpha2,sigma)
#                                         c(50,50,20,3,20,50),
#                                         c(50,50,20,3,10,50),
#                                         c(50,50,20,1,20,100),
#                                         c(70,50,10,3,20,200),
#                                         c(70,50,10,3,20,100),
#                                         c(70,50,0,3,30,50)
# define all possible blocks and parameters in lists
block <- list(c(6,2,4,6,6),c(20,10,20,30,20),c(40,40,40,60,60,60),c(1000))
block <- rep(block, each=6)
mu1 <- as.list(rep(c(50,50,50,70,70,70), 4))
mu2 <- as.list(rep(c(50,50,50,50,50),4))
eta <- as.list(rep(c(20,20,20,10,10,0),4))
alpha1 <- as.list(rep(c(3,3,1,3,3,3),4))
alpha2 <- as.list(rep(c(20,10,20,20,20,30),4))
sigma <- as.list(rep(c(50,50,100,200,100,50),4))
#Choose your number of repetitions
W=100;
w <- as.list(rep(W, 24))
# simulation function
allscenarios <- function(W,n,mu1,mu2,eta,alpha1,alpha2,sigma)
{
mySimul <- function(n,mu1,mu2,eta,alpha1,alpha2,sigma) {
#Computation begins
m=length(n)             #Number of blocks
nt=sum(n);              #Number of Patients (total)
# generate random sequence
ranSeq <- unlist(lapply(n, function(x) sample.int(x, x)))
# compute Xi, -1 for C, 1 for T
xi <- ranSeq %% 2 - (ranSeq + 1) %% 2
# compute Si
preS <- cumsum(xi) - xi    # each element is the sum of x1 to x(i-1)
s <- round(preS/(abs(preS)+0.001))
# generate z, assume z is Age, which is normal distributed
z1 <- round(rnorm(nt, 55, 15))
z2 <- rbinom(nt, 1,0.5)
# compute Y
designmatrix <- cbind(( 1 - xi) / 2, (xi + 1) / 2, s, z1, z2)
b<-c(mu1,mu2,eta,alpha1,alpha2)
expectedY<-designmatrix %*% b
Y <- sapply(expectedY, function(x) rnorm(1, x, sigma))
# calculating determinant.
detVal <- det(t(designmatrix) %*% designmatrix)
# estimating beta with general inverse
# solve will not working when det = 0
beta <- ginv(t(designmatrix) %*% designmatrix) %*% t(designmatrix) %*% Y
# estimating sigma
mlSigma <- sqrt(sum((Y-designmatrix %*% beta)^2) /  nt)
if (isTRUE(all.equal(detVal, 0)))
list <- list(c(beta, mlSigma, detVal),
list(designmatrix,c(beta, mlSigma, detVal)))
else list <- list(c(beta, mlSigma, detVal), NULL)
return (list)
}
# simulation W times and return results as data.frame
sim <- replicate(W, mySimul(n,mu1,mu2,eta,alpha1,alpha2,sigma))
#subsetting sim, which is list with 2W elements
sub <- rep(c(TRUE, FALSE),W)
simResult <- sapply(sim[sub],c)
design <- sim[!sub]
# if design is null list, empty it as NULL
design[sapply(design, is.null)] <- NULL
# checking determinant is zero or not, and use these info to subset
# simulation result and counting zero determinant
detZero <- sapply(simResult[7,], function(x) isTRUE(all.equal(x, 0)))
# subsetting simulation result based on logical vector detSign
# indicating whether determinant is non-zero
result <- subset(t(simResult), !detZero)[,1:6]
# calculate mean and sd for all
mlMeans <- apply(result, 2, mean)
mlSDs <- apply(result, 2, sd)
mlResults <- data.frame(mlMeans, mlSDs, sum(detZero))
mlList <- list(mlResults, design)
mlList
}
# compute the simulations for all blocks and parameter scenarios using
# mapply parallel version from package parallel
#list <- mcmapply(allscenarios,block, mu1, mu2, eta, alpha1,alpha2, sigma, mc.cores=detectCores())
# result <- do.call(rbind, list[rep(c(TRUE, FALSE),length(block))])
# designmatrix <- list[rep(c(FALSE, TRUE),length(block))]
# when using windows, replace mcmapply with clusterMap
mc <- detectCores()
cl <- makeCluster(getOption("cl.cores", mc))
clusterEvalQ(cl,library(MASS))
list <- clusterMap(cl,allscenarios,w, block, mu1, mu2, eta, alpha1, alpha2, sigma)
stopCluster(cl)
# subset list[[i]][[j]] by sapply(list, "[[", j)
result <- do.call(rbind, lapply(list, "[[", 1))
designmatrix <- lapply(list, "[[", 2)
allresults <- as.matrix(round(cbind(result[1:36,], result[37:72,], result[73:108,],result[109:144,]), 4))
colnames(allresults) <- c("(6,2,4,6,6)-mean","(6,2,4,6,6)-std","numberDetZero", '(20,10,20,30,20)-mean', '(20,10,20,30,20)-std',"numberDetZero", "(40,40,40,60,60,60)-mean","(40,40,40,60,60,60)-std","numberDetZero", "(1000)-mean","(1000)-std", "numberDetZero")
rownames(allresults) <- c('mu1=50','mu2=50','eta=20','alpha1=3','alpha2=20','sigma=50', 'mu1=50','mu2=50','eta=20','alpha1=3','alpha2=10','sigma=50', 'mu1=50','mu2=50','eta=20','alpha1=1','alpha2=20','sigma=100', 'mu1=70','mu2=50','eta=10','alpha1=3','alpha2=20','sigma=200', 'mu1=70','mu2=50','eta=10','alpha1=3','alpha2=20','sigma=100', 'mu1=70','mu2=50','eta=0','alpha1=3','alpha2=30','sigma=50')
allresults
write.csv2(allresults, file='/Users/wuxueping/WXP/Medical Biometry Masterstudiengang/Masterarbeit/one more covariate/onemorecovariatesimulationresults/AgeSex10k.csv', row.names=TRUE)
str(designmatrix)
save(list=ls(), file="/Users/wuxueping/WXP/Medical Biometry Masterstudiengang/Masterarbeit/one more covariate/onemorecovariatesimulationresults/AgeSex10k.RData")
proc.time() - pml
Rprof(NULL)
summaryRprof()
# compute rref of designmatrix with package pracma
#install.packages("pracma")
z1 <- designmatrix[[c(1,2,1)]]
z1
library(pracma)
rref(z1)
# ploting the data
library(ggplot2) # pretty plot
# genereate mu value matrix to calculate difference between mean and
# mu
mu <- c(c(50,50,20,3,20,50), c(50,50,20,3,10,50), c(50,50,20,1,20,100), c(70,50,10,3,20,200), c(70,50,10,3,20,100), c(70,50,0,3,30,50))
diff <- result[,1] - mu
# possible log transform for diff
# diff <- log2(abs(diff) + 1)
# generate dataframe for plotting
estlabel <- c("mu1","mu2","eta","alpha1","alpha2", "sigma")
est <- rep(estlabel, 24)
mulabel <- matrix(mu, ncol=6)
mulabel <- apply(mulabel, 2, function(x) paste(x[1],x[2],x[3],x[4],x[5],x[6], sep="_"))
mulabel <- rep(rep(mulabel, each=6),4)
block <- rep(c("6_2_4_6_6","20_10_20_30_20", "40_40_40_60_60_60","1000"), each=36)
df <- data.frame(est=est, mu=mulabel, block=block, diff=diff, sd=result[,2])
# change labels for block and mu
df$block <- factor(df$block, levels=c("6_2_4_6_6","20_10_20_30_20", "40_40_40_60_60_60","1000"), labels=c("(6,2,4,6,6)","(20,10,20,30,20)", "(40,40,40,60,60,60)","(1000)"))
df$mu <- factor(df$mu, levels=c("50_50_20_3_20_50","50_50_20_3_10_50","50_50_20_1_20_100","70_50_10_3_20_200","70_50_10_3_20_100","70_50_0_3_30_50" ),labels=c("50,50,20,3,20,50", "50,50,20,3,10,50","50,50,20,1,20,100", "70,50,10,3,20,200", "70,50,10,3,20,100","70,50,0,3,30,50"))
df$est <- factor(df$est, levels=estlabel)
# plot with ggplot2
# better with legend color and overall effects
# define label for legend label with greek letters and subscripts
legendLabel <- c(expression(mu[1]), expression(mu[2]), expression(eta), expression(alpha[1]), expression(alpha[2]), expression(sigma))
# ggplot2 object with scatter plot group by block and mu combinations
p <- qplot(sd, diff, data=df, facets=mu ~ block, col=est)
# adding x, y, and title labels
p <- p + labs(title="Simulation with Age and Sex Covariate", x="Standard Error",y="Deviation from True Parameters")
# add legend label text with greek letters
p <- p + scale_colour_discrete(name="Estimators", labels=legendLabel)
# change text size in annotating block and mu's
p <- p + theme(strip.text.y = element_text(size=8), strip.text.x = element_text(size=8))
AgeSex_final_plot <- p
AgeSex_final_plot
# scale with asinh, something like log
library(scales)
asinh_trans <- function(){
trans_new(name = 'asinh', transform = function(x) asinh(x),
inverse = function(x) sinh(x))
}
p <- p + scale_y_continuous(trans = 'asinh', breaks=c(-25,-5,-1,0,1,5,25))
p <- p + scale_x_continuous(trans="asinh", breaks=c(0,1,5,25,125))
p
methods(summary)
base:::summary
.libPaths()
update.packages()
y
y
require(ggplot2)
plots = lapply(1:5, function(.x) qplot(1:10,rnorm(10), main=paste("plot",.x)))
require(gridExtra)
do.call(grid.arrange,  plots)
require(lattice)
grid.arrange(qplot(1:10), xyplot(1:10~1:10),
tableGrob(head(iris)), nrow=2, as.table=TRUE, main="test main",
sub=textGrob("test sub", gp=gpar(font=2)))
## A largish data set
n <- 10000
x1  <- matrix(rnorm(n), ncol = 2)
x2  <- matrix(rnorm(n, mean = 3, sd = 1.5), ncol = 2)
x   <- rbind(x1, x2)
oldpar <- par(mfrow = c(2, 2))
smoothScatter(x, nrpoints = 0)
smoothScatter(x)
## a different color scheme:
Lab.palette <- colorRampPalette(c("blue", "orange", "red"), space = "Lab")
smoothScatter(x, colramp = Lab.palette)
## somewhat similar, using identical smoothing computations,
## but considerably *less* efficient for really large data:
plot(x, col = densCols(x), pch = 20)
## use with pairs:
par(mfrow = c(1, 1))
y <- matrix(rnorm(40000), ncol = 4) + 3*rnorm(10000)
y[, c(2,4)] <-  -y[, c(2,4)]
update.packages(ask = FALSE, dependencies = c('Suggests'))
install.packages("installr"); require(installr) #load / install+load installr
updateR()
install.packages("installr"); require(installr) #load / install+load installr
install.packages("install", lib="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
install.packages("~/Downloads/installr_0.15.3.tar.gz", repos = NULL, type = "source", lib="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
require(installr)
install.packages()
install.packages(.Library)
install.packages("/Library/Frameworks/R.framework/Versions/3.0/Resources/library/")
installed.packages("/Library/Frameworks/R.framework/Versions/3.0/Resources/library/")
installed.packages()
installed.packages(priority='NA')[,'Package']
pkgList <- installed.packages(priority='NA')[,'Package']
pkgList <- installed.packages(priority='NA')[,'Package']
pkgList
str(installed.packages(priority='NA'))
pkgList <- installed.packages("/Library/Frameworks/R.framework/Versions/3.0/Resources//library",priority='NA')[,'Package']
pkgList
pkgList <- installed.packages("/Library/Frameworks/R.framework/Versions/3.0/Resources/library",priority='NA')[,'Package']
pkgList
CRANpkgs <- available.packages(
contriburl=contrib.url('http://cran.r-project.org'))[,'Package']
forgePkgs <- available.packages(
contriburl=contrib.url('http://r-forge.r-project.org', type='source')
)[,'Package']
# 3. Calculate the set of packages which are installed on your machine,
#    not on CRAN but also present on R-Force.
pkgsToUp <- intersect(setdiff(pkgList, CRANpkgs), forgePkgs)
pkgsToUp
update.packages(checkBuilt=TRUE, ask=FALSE,
repos="http://r-forge.r-project.org",
oldPkgs=pkgsToUp)
forgePkgs
intersect(setdiff(pkgList, CRANpkgs), forgePkgs)
update.packages(checkBuilt=TRUE, ask=FALSE,
repos="http://r-forge.r-project.org",
oldPkgs=pkgsToUp)
pkgList <- installed.packages("/Library/Frameworks/R.framework/Versions/3.0/Resources/library",priority='NA')[,'Package']
pkgList
CRANpkgs <- available.packages(
contriburl=contrib.url('http://cran.r-project.org'))[,'Package']
setdiff(pkgList, CRANpkgs)
forgePkgs <- available.packages(
contriburl=contrib.url('http://r-forge.r-project.org', type='source')
)[,'Package']
# 3. Calculate the set of packages which are installed on your machine,
#    not on CRAN but also present on R-Force.
pkgsToUp <- intersect(setdiff(pkgList, CRANpkgs), forgePkgs)
pkgsToUp
update.packages(checkBuilt=TRUE, ask=FALSE,
repos="http://r-forge.r-project.org",
oldPkgs=pkgList)
repos="http://cran.r-project.org",
update.packages(checkBuilt=TRUE, ask=FALSE,
repos="http://cran.r-project.org",
oldPkgs=pkgList)
pkgList
pkgList
update.packages(checkBuilt=TRUE, ask=FALSE,
repos="http://cran.r-project.org",
oldPkgs=pkgList)
install.packages(pkgList)
installed.packages("/Library/Frameworks/R.framework/Versions/3.0/Resources/library",priority='NA')
plist <- installed.packages("/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
str(plist)
head(plist)
source("http://bioconductor.org/biocLite.R")
biocLite()
?biocLite
biocLite(pkgList)
cite(flowCore)
cite("flowCore")
citation("flowCore")
citation("flowStats")
citation("flowViz")
?citation
x <- citation("flowCore")
toBibtex(x)
x <- citation("flowCore")
toBibtex(x)
citation("flowStats")
toBibtex(citation("flowStats"))
toBibtex(citation("flowViz"))
setwd("/Users/yongsheng/Documents/PhD/TeX/PPP2R5C CYS PhD/figs")
require(grid) # for unit function in ggplot2
library(Cairo) # to print special character like † in ggplot2, and save to pdf
library(reshape2)
library(Hmisc)
read.xlsx("./tabs/primer list.xlsx")
read.xlsx("/Users/yongsheng/Documents/PhD/TeX/PPP2R5C CYS PhD/tabs/primer list.xlsx", sheetName = "Sheet1")
primerList <- read.xlsx("/Users/yongsheng/Documents/PhD/TeX/PPP2R5C CYS PhD/tabs/primer list.xlsx", sheetName = "Sheet1")
colnames(primerList)
colnames(primerList) <- c("Oligo No.", "Primer Sequence", "Name")
setwd("/Users/yongsheng/Documents/PhD/TeX/PPP2R5C CYS PhD/tabs")
primerList <- read.xlsx("./primer list.xlsx", sheetName = "Sheet1")
colnames(primerList) <- c("Oligo No.", "Primer Sequence", "Name")
latex(primerList,longtable=TRUE,rowlabel=NULL)
primerList <- read.xlsx("/Users/yongsheng/Documents/PhD/TeX/PPP2R5C CYS PhD/tabs/primer list.xlsx", sheetName = "Sheet1")
primerList <- read.xlsx("/Users/yongsheng/Documents/PhD/TeX/PPP2R5C CYS PhD/tabs/primer list.xlsx", sheetName = "Sheet1")
colnames(primerList) <- c("Oligo No.", "Primer Sequence", "Name")
setwd("/Users/yongsheng/Documents/PhD/TeX/PPP2R5C CYS PhD/figs")
latex(primerList,file="/Users/yongsheng/Documents/PhD/TeX/PPP2R5C CYS PhD/tabs/primerList.tex",longtable=TRUE,rowlabel=NULL)
latex(primerList,file="/Users/yongsheng/Documents/PhD/TeX/PPP2R5C CYS PhD/tabs/primerList.tex",longtable=TRUE,rowname=NULL)
primerList <- read.xlsx("/Users/yongsheng/Documents/PhD/TeX/PPP2R5C CYS PhD/tabs/tabs.xlsx", sheetName = "primer")
colnames(primerList) <- c("Oligo No.", "Primer Sequence", "Name")
latex(primerList,file="/Users/yongsheng/Documents/PhD/TeX/PPP2R5C CYS PhD/tabs/primerList.tex",longtable=TRUE,rowname=NULL)
setwd("/Users/yongsheng/Documents/PhD/TeX/PPP2R5C CYS PhD/tabs/")
primerList <- read.xlsx("./tabs.xlsx", sheetName = "primer")
colnames(primerList) <- c("Oligo No.", "Primer Sequence", "Name")
latex(primerList,longtable=TRUE,rowname=NULL)
setwd("/Users/yongsheng/Documents/PhD/TeX/PPP2R5C CYS PhD/tabs/")
primerList <- read.xlsx("./tabs.xlsx", sheetName = "primer")
colnames(primerList) <- c("Oligo No.", "Primer Sequence", "Name")
instrumentList <- read.xlsx("./tabs.xlsx", sheetName = "instrument")
instrumentList
instrumentList <- read.xlsx("./tabs.xlsx", sheetName = "instrument")
read.xlsx("./tabs.xlsx", sheetName = "instrument")
instrumentList <- read.xlsx("./tabs.xlsx", sheetName = "instrument")
latex(instrumentList,longtable=TRUE,rowname=NULL)
instrumentList <- read.xlsx("./tabs.xlsx", sheetName = "instrument")
latex(instrumentList,longtable=TRUE,rowname=NULL)
antibodyList <- read.xlsx("./tabs.xlsx", sheetName = "antibody")
read.xlsx("./tabs.xlsx", sheetName = "antibody")
read.xlsx("./tabs.xlsx", sheetName = "antibody")
antibodyList <- read.xlsx("./tabs.xlsx", sheetName = "antibody")
latex(antibodyList,longtable=TRUE,rowname=NULL)
antibodyList <- read.xlsx("./tabs.xlsx", sheetName = "antibody")
latex(antibodyList,longtable=TRUE,rowname=NULL)
chemicalList <- read.xlsx("./tabs.xlsx", sheetName = "chemical")
chemicalList
chemicalList <- read.xlsx("./tabs.xlsx", sheetName = "chemical")
chemicalList
latex(chemicalList,longtable=TRUE,rowname=NULL)
setwd("/Users/yongsheng/Documents/PhD/TeX/PPP2R5C CYS PhD/tabs/")
instrumentList <- read.xlsx("./tabs.xlsx", sheetName = "instrument")
latex(instrumentList,longtable=TRUE,rowname=NULL)
library(Hmisc)
instrumentList <- read.xlsx("./tabs.xlsx", sheetName = "instrument")
latex(instrumentList,longtable=TRUE,rowname=NULL)
kit <- read.xlsx("./tabs.xlsx", sheetName = "kit")
kit
latex(kit,longtable=TRUE,rowname=NULL)
library(Hmisc)
setwd("/Users/yongsheng/Documents/PhD/TeX/PPP2R5C CYS PhD/tabs/")
primerList <- read.xlsx("./tabs.xlsx", sheetName = "primer")
soft <- read.xlsx("./tabs.xlsx", sheetName = "software")
soft
latex(soft,longtable=TRUE,rowname=NULL)
buffer <- read.xlsx("./tabs.xlsx", sheetName = "buffers")
buffer
latex(buffer,longtable=TRUE,rowname=NULL)
library(Hmisc)
setwd("/Users/yongsheng/Documents/PhD/TeX/PPP2R5C CYS PhD/tabs/")
tab1.2 <- read.xlsx("./tabsChap1.xlsx", sheetName = "tab1.2")
tab1.2
latex(tab1.2,rowname=NULL)
latex(tab1.2,longtable=TRUE,rowname=NULL)
latex(tab1.2,rowname=NULL)
library(Hmisc)
setwd("/Users/yongsheng/Documents/PhD/TeX/PPP2R5C CYS PhD/tabs/")
wb <- loadWorkbook("./tabs.xlsx")
sheets <- getSheets(wb) # generate a list of sheets
sheetNames <- names(sheets) # get names of each sheets
list <- list()
# both loops works
for (i in seq_along(sheetNames)) {
list[[i]] <- read.xlsx("./tabs.xlsx", sheetName=sheetNames[i])
}
names(list) <- sheetNames
latex.list(list,longtable=TRUE,rowname=NULL)
library(Hmisc)
setwd("/Users/yongsheng/Documents/PhD/TeX/PPP2R5C CYS PhD/tabs/")
tab2.1 <- read.table("./refed_1.txt")
tab2.1 <- read.table("./refed_1.txt", sep="\t")
tab2.1 <- read.table("./refed_1.txt", sep="\t", skip=1)
tab2.1 <- read.table("./refed_1.txt", sep="\t", skip=c(1,33))
tab2.1 <- read.table("./refed_1.txt", sep="\t", skip=1, nrows=31,header=TRUE)
tab2.1
latex(tab2.1,rowname=NULL)
tab2.2 <- read.table("./fast_1.txt", sep="\t", skip=1, nrows=31,header=TRUE)
tab2.2 <- read.table("./fast_1.txt", sep="\t", skip=1, nrows=29,header=TRUE)
latex(tab2.2,rowname=NULL)
tab2.3 <- read.table("./random_1.txt", sep="\t", skip=1, nrows=31,header=TRUE)
tab2.3 <- read.table("./random_1.txt", sep="\t", skip=1, nrows=24,header=TRUE)
latex(tab2.3,rowname=NULL)
tab2.1
latex(tab2.1[,c(1,2,5)],rowname=NULL)
latex(tab2.2[,c(1,2,5)],rowname=NULL)
latex(tab2.3[,c(1,2,5)],rowname=NULL)
latex(tab2.1[,c(1,2,5)],rowname=NULL,booktabs=TRUE)
latex(tab2.2[,c(1,2,5)],rowname=NULL,booktabs=TRUE)
latex(tab2.3[,c(1,2,5)],rowname=NULL,booktabs=TRUE)
tab2.4 <- read.table("./activated TFs.txt", sep="\t", skip=1, nrows=24,header=TRUE)
tab2.4 <- read.table("./activated TFs.txt", sep="\t", skip=1, nrows=18,header=TRUE)
latex(tab2.4[,c(1,2,5)],rowname=NULL,booktabs=TRUE)
